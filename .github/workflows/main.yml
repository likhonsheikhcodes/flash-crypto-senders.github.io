name: FlashCryptoSenders CI/CD and Updates

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */2 * * *'  # Runs every 2 hours

env:
  TELEGRAM_POST_ID: '36'

jobs:
  build-and-update:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2

    - name: Check for file changes
      id: file_changes
      run: |
        CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
        if [[ -n "$CHANGED_FILES" ]]; then
          echo "::set-output name=changes::true"
          echo "::set-output name=files::$CHANGED_FILES"
        else
          echo "::set-output name=changes::false"
        fi

    - name: Update updates.txt
      if: steps.file_changes.outputs.changes == 'true'
      run: |
        CHANGED_FILES="${{ steps.file_changes.outputs.files }}"
        CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        echo "New files updated at $CURRENT_TIME: $CHANGED_FILES" >> updates.txt
        sed -i '1!G;h;$p' updates.txt  # Reverse the file
        sed -i '6,$d' updates.txt      # Keep only the last 5 lines
        sed -i '1!G;h;$p' updates.txt  # Reverse the file back

    - name: Commit updates.txt changes
      if: steps.file_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add updates.txt
        git commit -m "Update updates.txt with latest changes"
        git push

    - name: Generate update message
      id: update_msg
      run: |
        UPDATES=$(cat updates.txt | sed 's/^/üåê /')
        CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        RISK_LEVEL=$((RANDOM % 5 + 1))
        SCORE=$((RANDOM % 100 + 1))
        
        MESSAGE=$(cat << EOF
        üöÄ FlashCryptoSenders Update ‚ú®

        üü¢ Latest Updates:
        $UPDATES

        ‚öñÔ∏è Risk Level: $RISK_LEVEL/5
        ‚≠ê Score: $SCORE/100
        üè¢ Last Updated: $CURRENT_TIME

        üîó Quick Links:
        [Website](https://flashcrypto.vercel.app/) | [GitHub](https://github.com/flash-crypto-senders) | [Telegram](https://t.me/RecentCoders) | [Documentation](https://flashcrypto.vercel.app/docs) | [Support](https://flashcrypto.vercel.app/support)

        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        EOF
        )
        
        echo "::set-output name=message::$MESSAGE"

    - name: Update Telegram post
      run: |
        MESSAGE="${{ steps.update_msg.outputs.message }}"
        INLINE_KEYBOARD='{
          "inline_keyboard": [[
            {"text": "Website", "url": "https://flashcrypto.vercel.app/"},
            {"text": "GitHub", "url": "https://github.com/flash-crypto-senders"},
            {"text": "Telegram", "url": "https://t.me/RecentCoders"},
            {"text": "Docs", "url": "https://flashcrypto.vercel.app/docs"},
            {"text": "Support", "url": "https://flashcrypto.vercel.app/support"}
          ]]
        }'
        
        curl -s -X POST https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/editMessageText \
          -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
          -d message_id=${{ env.TELEGRAM_POST_ID }} \
          -d text="$MESSAGE" \
          -d parse_mode=Markdown \
          -d reply_markup="$INLINE_KEYBOARD"
